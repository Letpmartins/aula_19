Aula de Deploy

Servidor: 
Computador baseado em desenpenho onde se guardam as aplicações para fornecê-las ao cliente. 
Guarda o banco e roda o backend.

Antigamente, todos os assuntos ligados ao servidor (manutenção, segurança, etc) eram responsabilidade do dono,
por isso surgiu a hospadagem compartilhada (Godaddy, Hostgator, entre outras)

A nuvem: maquinas virtuais q servem de servidor para grandes empresas, tão grandes quanto forem necessárias para 
a empresa.

Servidores são tão caros quanto carros, não vale a pena ter um em casa. É mais fácil subir pra nuvem.

Heroku: serviço gratuito (em partes) de servidor em nuvem. Bom para testes e aplicações menores.
coisas necessárias para usar-lo:
Heroku-cli: npm install -g heroku
pm2: npm install -g pm2

o projeto q vc for subir precisa de algumas mofificações de segurança:
no terminal do projeto: npm install dotenv

cria os arquivos: .env e .env.example

no .env:
DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASS= 
DB_DATABASE=fake-instagram
DB_DIALECT=mysql

aí no database.js vc substitui a informação:
require("dotenv").config();
host: process.env.DB_HOST, e por aí vai

no .env.example:
DB_HOST=
DB_PORT=
DB_USER=
DB_PASS= 
DB_DATABASE=
DB_DIALECT=

inclui o .env no .gitignore

isso é o mínimo (junto com apaga os console.log() e outros testes)
-------------------------------------------------------------------
para subir o projeto:
é preciso logar no heroku-cli
no terminal: heroku login

o heroku cai criar um container pro projeto:

no terminal: heroku create --app=nomedoprojeto
ele cria um domínio.heroku e um novo origin no git pra subir alterações pra produção vc só usa 
"git push heroku master"

só falta o banco de dados. O banco padrão do heroku é postgres (tem sql tbm, não é pago mas precisa 
cadastrar cartão de crédito)
no terminal: heroku addons:create heroku-postgresql:nomedobanco

ele cria um env DATABASE_URL com as info do banco

para acessá-la: heroku config | grep DATABASE_URL
vem no formato: postgres:// nomedeusuario:senha@host:porta/database

pra recongigurar:

heruko config:set DB_USER=nomedeusuario ... o mesmo pros outros (DIALECT = postgres) 
(se precisar atualizar, é só rodar o mesmo comando de novo,  heroku sobrescreve)

depois precisa intalar o pacote do postgres no projeto: npm install --save pg pg-hstore
 
depois de instalado, commita (git push heroku master)

para rodar as migrations: heroku run npx sequelize db:migrate (se o sequelize não rodar, vai no package.json, 
tira o sequelize do dev-dependecies e junta com as outras, precisa commitar denovo depois)
commita outra vez

em um projeto sem migrations, vc conecta diretamente pelo programa de fazer bancos (tipo o workbench, e similares),
e sobe direto (lembrando que tem q fazer o banco no postgres)

se a aplicação der problema no ambiente de produção: heroku logs --tail, mostra os erros